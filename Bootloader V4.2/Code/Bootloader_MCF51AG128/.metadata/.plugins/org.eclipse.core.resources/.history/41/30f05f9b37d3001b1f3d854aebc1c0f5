// Bootloader V3.0

#include <hidef.h> /* for EnableInterrupts macro */
#include "derivative.h" /* include peripheral declarations */
#define BM_FLASH_ERR_MASK   0x30U  
volatile far word SR_reg;              /* Current CCR register */
typedef void (*PFnCmdInRam)(byte 0x40U);

void Flash_clock_init(void);

typedef struct {
  byte code[0x32];                     /* Structure required to copy code to ram memory */
  /* Size of this structure needs to be at least (but best) the size of the FnCmdInRam_ */
} TFnCmdInRamStruct;

void Flash_clock_init(void){
	FCDIV_FDIVLD = 1;
	FCDIV_PRDIV8 = 1;
	FCDIV_FDIV = 0x8U; 
}


void SPI_init(void){
	SCGC2_SPI2 = 1;	/* clock gating */
	SPI2C1_LSBFE = 0; /* MSB */
	SPI2C1_SSOE = 0; /* Slave select input (/SS:MODFEN&SSOE) */
	SPI2C1_CPHA = 1; /* Start first edge*/
	SPI2C1_CPOL = 0; /* Active-high */
	SPI2C1_MSTR = 0; /* Slave */
	SPI2C1_SPTIE = 0; /* No SPI Transmit IT */
	SPI2C1_SPE = 1; /* SPI enable */
	SPI2C1_SPIE = 1; /* SPI IT Rx/Fault */
	SPI2C2_SPC0 = 0; /* IN/OUT separate */
	SPI2C2_SPISWAI = 0; /* Stop SPI at WAIT */
	SPI2C2_RXDMAE = 0; /* No receive DMA */
	SPI2C2_BIDIROE = 0; /* No Bidirectional */
	SPI2C2_MODFEN = 0; /* Mode-Fault function enable (/SS:MODFEN&SSOE) */
	SPI2C2_TXDMAE = 0; /* No transmit DMA */
	SPI2C2_SPIMODE = 1; /* 16-bit SPI */
	SPI2C2_SPMIE = 0; /* No SPI Match IT */  
	
}


void mFlash_write(unsigned long address, unsigned long value){
	unsigned long *pdst;
	if (address >= 800000){
		address = address - 8382464;
	}
	FSTAT_FCBEF = 1;
	if (FSTAT_FPVIOL || FSTAT_FACCERR){ FSTAT = 0x30;}
	pdst = (unsigned long *)(address);
	*pdst = value;
	FCMD = 0x20; 
	FSTAT = 0x80;
	while (!FSTAT_FCCF){}
}

static void FnCmdInRam_(byte Comand_)
{
  FCMD = Comand_;                      /* Initiate command */
  FSTAT = 0x80U;                       /* Launch the command */
  if ((FSTAT & BM_FLASH_ERR_MASK) == 0U) { /* If no protection violation or access error detected */
    while (FSTAT_FCCF == 0U) {}        /* Wait for command completion */
  }
  return;
}

void mFlash_erase(unsigned long address_to_erase, unsigned int length ){
	  
	  TFnCmdInRamStruct FnCmdInRam;
	  PFnCmdInRam FnInRam = (void*)(((dword)&FnCmdInRam + 1) & ~1UL); /* align function to even address */

	  memcpy(FnInRam, FnCmdInRam_, sizeof(TFnCmdInRamStruct) - 1);
	  asm{\
	    move.w SR,D0; \
	    move.w D0,SR_reg; \
	    ori.l #1792,D0;\
	    move.w D0,SR;\
	    }                    /* Save the PS register */
	  FSTAT = 0x00U;                       /* Init. flash engine */
	  if ((FSTAT & BM_FLASH_ERR_MASK) != 0U) { /* Protection violation or access error? */
	    FSTAT = BM_FLASH_ERR_MASK;         /* Clear FPVIOL & FACERR flag */
	  }
	  *(volatile dword *) (address_to_erase) = 0x00; /* Write data to the flash memory */
	  FnInRam(Command_);                   /* Call code in RAM */
	  
	  asm{ \
	    move.w SR_reg,D0; \
	    move.w D0,SR; \
	  }  	  

}


void main(void) {
	DisableInterrupts
  /* include your code here */
	
	// Intern clock init
	ICSC1 = 0x04;
	ICSC2 = 0x40;
	ICSTRM = 0x9D;

	ICSSC = 0x70;
	Flash_clock_init();
	
	//Memory protection
	FPROT_FPS = 0x7C; 
	FPROT_FPOPEN = 1;

	EnableInterrupts;
	PE_low_level_init();
	SPI_init();
	
	mFlash_write(0x2000, 0x11111111);
	asm{nop;};
	mFlash_erase(0x2000, 1);

  for(;;) {
    //__RESET_WATCHDOG();	/* feeds the dog */
  } /* loop forever */
  /* please make sure that you never leave main */
}
